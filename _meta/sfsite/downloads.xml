<file>
<title>Downloads und Quellcodes</title>

<head>
<meta  name="description"  content="Downloads von VideLibri, woher man neue Bibliotheken bekommt, und wie man den Quellcode kompiliert."/>
</head>

<content title="Downloads">

<insert href="downloadTable.html"/>

Es ist auch eine 
<a href="https://play.google.com/store/apps/details?id=de.benibela.videlibri" rel="nofollow"><img alt="Android app on Google Play" width="125" height="45" src="https://developer.android.com/images/brand/de_app_rgb_wo_45.png" /></a>. 
<br/><br/>
Außerdem lässt es sich als <a href="https://fdroid.videlibri.de/repo/">F-Droid Repository</a> installieren.


<br/><br/>
Die Windowsversion besteht aus einem automatischen Installer und ist 32 Bit, so dass sie auf allen Windowscomputern laufen sollte. Falls die Bibliothek (wie die VÖBB) TLS1.2 verwendet, muss auf Systemen älter als Windows 8.1 erst TLS1.2 <a href='https://www.videlibri.de/help/faq.html#inet_failed'>aktiviert werden</a>, bevor VideLibri auf den Server zu greifen kann. <br/>
Für Linux muss jeweils die passende Version heruntergeladen werden. Die relevante Unterscheidung ist 32/64-Bit, die deb-Datei kann auf nicht Debian-basierten-Systemen mit dem Programm <code>alien</code> installiert werden.

</content>

<content title="Zusätzliche Bibliothekssysteme">

<p>Da die unterstützten OPACs nicht in VideLibri einprogrammiert sind, sondern als dynamisch interpretierte Templates vorliegen, können <a href="https://www.videlibri.de/test/">Updates für einzelne Bibliotheken</a> separat bereitgestellt werden. Man kann die Adresse eines solchen Updates in VideLibri eingeben, und dann lädt VideLibri alle nötigen Informationen, um auf einen neuen/geänderten Bibliotheks-OPAC zugreifen zu können, von dieser Adresse herunter.</p>

<p>Dieser Update-Mechanismus wird aber nur selten verwendet, für Updates, die zwar kritisch sind, aber nur einzelne Benutzer betreffen, oder zum Beta-Testen einer neuen Bibliothek. Für Updates, die viele Benutzer betreffen oder auf die man einige Zeit warten kann, wird ein reguläres Update mit einer inkrementierten VideLibri-Versionsnummer im oberen Abschnitt erstellt. </p>

<p>Hier kann man auch sehen, was ein Benutzer oder eine Bibliothek schreiben muss, um ein eigenes Update für einen neuen OPAC zu erstellen. Da diese Einzel-Updates von einer eingegebenen URL heruntergeladen werden, kann auch jede andere Webseite als die oben verlinke verwendet werden, so dass jede Bibliothek und jeder Nutzer in Form einer P2P-Community ihre eigenen VideLibri-Server aufsetzen können, über den sie Templates für beliebige Bibliothen weitergeben können.</p>

</content>
 
<content title="Kompilierung des Quellcodes">

<p>
Zusätzlich zum obigen Tarball gibt es die neuste Version des Quellcodes in einem <a href="https://sourceforge.net/p/videlibri/code/ci/tip/tree/">Mercurial-Repository</a>. Diese beiden Varianten sind die vollständigsten Versionen des Quellcodes und enthalten auch Code, der nicht (mehr) zu VideLibri gehört, aber als Abhängigkeit benötigt wird, um VideLibri zu erstellen (z.B.: Internet Tools, Synapse), oder umgekehrt auf VideLibri aufbaut (Spin-Off Xidel).  Weitere Mirrors finden sich auf <a href="https://github.com/benibela/videlibri">Github</a> <a href="https://travis-ci.com/benibela/videlibri"><img src="https://api.travis-ci.com/benibela/videlibri.svg?branch=master" alt="Build status" style="margin:0"/></a>. <!--, <a href="https://bitbucket.com/benibela/videlibri">Bitbucket</a> und <a href="http://gitlab.com/benito/videlibri">Gitlab</a>-->. Diese Mirrors haben nur VideLibris eigenen Quellcode und zum Kompilieren muss man die nötigen Abhängigkeiten (Internet Tools, FLRE, TreeListView, Diagram, Rcmdline, Synapse) separat herunterladen. </p>
<p>Das Programm ist in FreePascal/Lazarus geschrieben, und sollte sich einfach kompilieren lassen, indem man die Projektdatei  <code>bookWatch.lpi</code> in Lazarus 1.8 öffnet und in den Projekteinstellungen sein Betriebssystem auswählt. VideLibri wurde unter Windows (Win32) und Linux (mit Gtk2 und Qt) getestet, aber in der Auswahlliste von Lazarus findet sich zusätzlich <!--Windows, Linux, -->MacOS, Android, WinCE, iphonesim, OS2, OpenBSD mit Gtk, Gtk2, Gtk3, Qt, Qt5, Win32, Customdrawn, Cocoa und Carbon, wobei Lazarus-Einstellungen ohne obiges Binary nicht getestet wurde.</p>
  
Das Selbst-Kompilieren einer Androidversion ist komplizierter, denn man benötigt zusätzlich ein installiertes Java JDK, Android-SDK und Android-NDK. Zudem sollte man mindestens <a href="https://wiki.freepascal.org/Android" rel="nofollow">FreePascal 3.3.1</a> installieren, da ältere FreePascal-Versionen nicht mit allen Android-Versionen funktionieren. Dann müssen zwei Projekte kompiliert werden, die Kernfunktionen von VideLibri wieder mit Lazarus und eine Android-GUI mit gradle/java. Theoretisch könnte man in der Lazarusbetriebssystemauswahl Android+customdrawn auswählen, um nur ein einziges Projekt mit der Lazarus-Android-GUI zu erstellen, dies scheint jedoch eine der nicht funktionierenden Lazarus-Einstellungen zu sein (wie vermutlich auch die iphone-Option) und führte zu einer nicht lauffähigen App. <br/> 
Stattdessen kompilieren wir das eine Projekt <code>android/videlibriandroid.lpi</code> ohne GUI mit Lazarus wie zuvor, und erstellen die Java-GUI mit <code>android/gradlew assembleDebug</code> (bzw. <code>android/gradlew assembleRelease</code>). Es gibt ein Hilfskript <code>android/manage.sh</code>, welches Lazarus und Gradle aufruft, so dass man alles mit einem Aufruf kompilieren kann. In dieses Skript muss man jedoch die Pfade eintragen, in die man Lazarus, Java und das Android-SDK auf seinem Computer hininstalliert hat, da sie sonst nicht gefunden werden. 

</content>

</file>